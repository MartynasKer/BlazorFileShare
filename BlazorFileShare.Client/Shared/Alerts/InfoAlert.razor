@using BlazorFileShare.Client.Services
@using BlazorFileShare.Shared.Domain
@inject IHubClient hubService
@inject IRTCInterop rtcService


@if (display)
{
    @if (info.Success == true)
    {
        <div class="alert alert-success alert-dismissible fade show fadeIn" role="alert">
            @info.Message
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    else
    {
        <div class="alert alert-danger alert-dismissible fade show fadeIn" role="alert">
            @info.Message
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
}

@code {
    Info info;
    bool display = false;
    bool showclass = false;
    System.Threading.CancellationTokenSource cTS = new();

    protected override void OnInitialized()
    {
        hubService.OnInfo += DisplayInfo;
        rtcService.OnReportProgress += (f) =>
        {
            DisplayInfo(new Info($"Downloading file: {(int)(f * 100.0f)}%", true));
        };
    }

    async void DisplayInfo(Info info)
    {
        cTS.Cancel();
        cTS = new();
        this.info = info;
        await ShowAlert(cTS.Token);
    }

    async Task ShowAlert(System.Threading.CancellationToken token)
    {

        display = true;
        this.StateHasChanged();
        try
        {
            await Task.Delay(5000, token);
        }
        catch
        {

        }
        if (token.IsCancellationRequested)
        {
            return;
        }
        display = false;
        this.StateHasChanged();
    }
}